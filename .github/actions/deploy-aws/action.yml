name: 'Deploy AWS Beanstalk'
description: 'Deploy Application to the AWS Beanstalk PaaS service'
inputs:
  inputs:
    bucketName:
      type: string
      description: S3 Bucket to retrieve package to deploy
      required: true
    assumeRole:
      type: string
      description: AWS ARN for the role to assume
      required: true
    region:
      type: string
      description: AWS region to retrieve role
      required: true
    targetEnv:
      type: string
      description: Target Beanstalk environment name to update with new version
      default: Development
    applicationName:
      type: string
      description: AWS Beanstalk application name
      required: true
    version:
      type: string
      description: Version to deploy
      required: true
    packageType:
      type: string
      description: Package Type to deploy - jar, zip, war
      required: true
      
runs:
  using: "composite"
  steps:
    - name: Configure AWS Credentials
      id: configure-credentials
      uses: aws-actions/configure-aws-credentials@v4.0.1
      with:
        role-to-assume: ${{ inputs.assumeRole }}
        role-session-name: GitHub_to_AWS_via_FederatedOIDC
        aws-region: ${{ inputs.region }}
    
    - name: Create new ElasticBeanstalk Application Version
      id: create-app
      run: |
        aws elasticbeanstalk create-application-version \
        --application-name ${BEANSTALK_APP_NAME} \
        --source-bundle S3Bucket="$BUCKET_NAME",S3Key="packages/$BEANSTALK_APP_NAME/$BEANSTALK_APP_NAME-$VERSION.$PACKAGE_TYPE" \
        --version-label "$VERSION" \
        --description "Deploy $VERSION of $BEANSTALK_APP_NAME"
      shell: bash
      env:
        VERSION: ${{ inputs.version }}
        BUCKET_NAME: ${{ inputs.bucketName }}
        BEANSTALK_APP_NAME: ${{ inputs.applicationName }}
        PACKAGE_TYPE: ${{ inputs.packageType }}
        
    - name: Deploy new ElasticBeanstalk Application Version
      id: deploy-app
      run: aws elasticbeanstalk update-environment --environment-name  $TARGET_ENV_NAME --version-label "$VERSION"
      shell: bash
      env:
        VERSION: ${{ inputs.version }}
        TARGET_ENV_NAME: ${{ inputs.targetEnv }}
