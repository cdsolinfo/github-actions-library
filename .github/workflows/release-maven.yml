on:
  workflow_call:
    inputs:
      java-version:
        type: string
        description: "[Version Java à être utiliser](https://github.com/actions/setup-java#supported-version-syntax)"
        default: "17"
      distribution:
        type: string
        description: "[Distribution Java](https://github.com/actions/setup-java#supported-distributions)"
        default: "corretto"
      architecture:
        type: string
        description: "Architecture cible (x86, x64, armv7, aarch64, ppc64le)"
        default: "x86"
      pre-release:
        type: boolean
        description: "Indique si le release est un pré release ou final prêt pour un déploiement en production"
        default: false
      role-to-assume:
        type: string
        description: "Rôle AWS à assumer pour la publication de l'image Docker dans ECR"
        required: true
      ecr-registry:
        type: string
        description: "Numéro de compte du registre ECR si différent que numéro de compte du rôle assumé"
        required: false
      ecr-repository:
        type: string
        description: "Nom du dépôt ECR où doit être pousser l'image Docker"
        required: true
      aws-region:
        type: string
        description: "Region AWS"
        required: false
        default: "ca-central-1"
env:
  MVNCMD: ./mvnw -B 
  AWS_REGION: ${{ inputs.aws-region || inputs.aws-region.default }}

jobs:
  detect_wrapper:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Detect maven wrapper
        id: detect_wrapper
        run: |
          if [! -f ${{ github.workspace }}/mvnw ]; then
            echo "Assurez-vous d'installer le wrapper maven" && exit 1
          fi
        shell: bash

  release_package:
    needs:
      - detect_wrapper
    permissions:
      contents: write
      packages: write
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        fetch-tags: true

    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        java-version: ${{ inputs.java-version }}
        distribution: ${{ inputs.distribution }}
        architecture: ${{ inputs.architecture }}
        cache: maven

    - name: Prepare maven wrapper
      run: |
        chmod +x ${{ github.workspace }}/mvnw
      shell: bash
      
    - name: Prepare release
      run: |
        git clean -f -d -x
        $MVNCMD release:clean release:prepare -DpushChanges=false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Perform release
      run: |
        $MVNCMD release:perform -DlocalCheckout=true -DdeployAtEnd=true "-Dgoals=install package source:jar javadoc:jar deploy"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract version number
      id: get_version
      run: |
        echo "release_version=$($MVNCMD help:evaluate -Dexpression='project.version' -q -DforceStdout)" >> $GITHUB_OUTPUT
            
    - name: Commit & Push new version
      uses: actions-js/push@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }}
        tags: true

    - name: Create a GitHub release
      id: create_release
      uses: ncipollo/release-action@v1
      with:
        makeLatest: ${{ inputs.pre-release == false}}
        draft: false
        prerelease: ${{ inputs.pre-release }}
    outputs:
      version: ${{ steps.get_version.outputs.release_version }}

  publish_docker:
    needs:
      - release_package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.java-version }}
          distribution: ${{ inputs.distribution }}
          architecture: ${{ inputs.architecture }}
          cache: maven

      - name: Prepare maven wrapper
        run: |
          chmod +x ${{ github.workspace }}/mvnw
        shell: bash

      - name: Configure AWS Credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v4.0.1
        with:
          role-to-assume: ${{ inputs.role-to-assume }}
          role-session-name: ${{ inputs.session-name }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: ${{ inputs.ecr-registry }}

      - name: Normalize git branch name
        id: normalized-branch-name
        uses: ankitvgupta/ref-to-tag-action@master
        with:
          ref: ${{ github.ref }}
          head_ref: ${{ github.head_ref }}

      - name: Publish to Amazon ECR
        run: |
          $MVNCMD compile jib:build \
            -Dimage=${{ steps.login-ecr.outputs.registry }}/${{ inputs.ecr-repository }}:${{ needs.release_package.outputs.version }}